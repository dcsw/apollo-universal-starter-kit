# Xxxx
type Xxxx {
  id: Int!
  title: String!
  content: String!
  yyyys: [Yyyy]
}

# Yyyy
type Yyyy {
  id: Int!
  content: String!
}

# Edges for Xxxxs
type XxxxEdges {
  node: Xxxx
  cursor: Int
}

# PageInfo for Xxxxs
type XxxxPageInfo {
  endCursor: Int
  hasNextPage: Boolean
}

# Xxxxs relay-style pagination query
type Xxxxs {
  totalCount: Int
  edges: [XxxxEdges]
  pageInfo: XxxxPageInfo
}

extend type Query {
  # Xxxxs pagination query
  xxxxs(limit: Int, after: Int): Xxxxs
  # Xxxx
  xxxx(id: Int!): Xxxx
}

extend type Mutation {
  # Create new xxxx
  addXxxx(input: AddXxxxInput!): Xxxx
  # Delete a xxxx
  deleteXxxx(id: Int!): Xxxx
  # Edit a xxxx
  editXxxx(input: EditXxxxInput!): Xxxx
  # Add yyyy to xxxx
  addYyyy(input: AddYyyyInput!): Yyyy
  # Delete a yyyy
  deleteYyyy(input: DeleteYyyyInput!): Yyyy
  # Edit a yyyy
  editYyyy(input: EditYyyyInput!): Yyyy
}

# Input for addXxxx Mutation
input AddXxxxInput {
  title: String!
  content: String!
}

# Input for editXxxx Mutation
input EditXxxxInput {
  id: Int!
  title: String!
  content: String!
}

# Input for addYyyy Mutation
input AddYyyyInput {
  content: String!
  # Needed for yyyyUpdated Subscription filter
  xxxxId: Int!
}

# Input for editYyyy Mutation
input DeleteYyyyInput {
  id: Int!
  # Needed for yyyyUpdated Subscription filter
  xxxxId: Int!
}

# Input for deleteYyyy Mutation
input EditYyyyInput {
  id: Int!
  content: String!
  # Needed for yyyyUpdated Subscription filter
  xxxxId: Int!
}

extend type Subscription {
  # Subscription for when editing a xxxx
  xxxxUpdated(id: Int!): Xxxx
  # Subscription for xxxx list
  xxxxsUpdated(endCursor: Int!): UpdateXxxxPayload
  # Subscription for yyyys
  yyyyUpdated(xxxxId: Int!): UpdateYyyyPayload
}

# Payload for xxxxsUpdated Subscription
type UpdateXxxxPayload {
  mutation: String!
  id: Int!
  node: Xxxx
}

# Payload for yyyyUpdated Subscription
type UpdateYyyyPayload {
  mutation: String!
  id: Int
  xxxxId: Int!
  node: Yyyy
}
